// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/data.proto

package proto

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	types "github.com/cosmos/gogoproto/types"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type FieldDescription int32

const (
	FieldDescription_FIELD_DESCRIPTION_UNSPECIFIED FieldDescription = 0
	FieldDescription_SIZE                          FieldDescription = 1
	FieldDescription_ASSORTMENT                    FieldDescription = 2
	FieldDescription_MODEL_SIZE                    FieldDescription = 3
	FieldDescription_ALL                           FieldDescription = 4
)

var FieldDescription_name = map[int32]string{
	0: "FIELD_DESCRIPTION_UNSPECIFIED",
	1: "SIZE",
	2: "ASSORTMENT",
	3: "MODEL_SIZE",
	4: "ALL",
}

var FieldDescription_value = map[string]int32{
	"FIELD_DESCRIPTION_UNSPECIFIED": 0,
	"SIZE":                          1,
	"ASSORTMENT":                    2,
	"MODEL_SIZE":                    3,
	"ALL":                           4,
}

func (x FieldDescription) String() string {
	return proto.EnumName(FieldDescription_name, int32(x))
}

func (FieldDescription) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ac8e6d38f431921d, []int{0}
}

type FieldStatus int32

const (
	FieldStatus_FIELD_STATUS_UNSPECIFIED FieldStatus = 0
	FieldStatus_OK                       FieldStatus = 1
	FieldStatus_YELLOW                   FieldStatus = 2
)

var FieldStatus_name = map[int32]string{
	0: "FIELD_STATUS_UNSPECIFIED",
	1: "OK",
	2: "YELLOW",
}

var FieldStatus_value = map[string]int32{
	"FIELD_STATUS_UNSPECIFIED": 0,
	"OK":                       1,
	"YELLOW":                   2,
}

func (x FieldStatus) String() string {
	return proto.EnumName(FieldStatus_name, int32(x))
}

func (FieldStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ac8e6d38f431921d, []int{1}
}

type RecognitionStatus int32

const (
	RecognitionStatus_RECOGNITION_STATUS_UNSPECIFIED RecognitionStatus = 0
	RecognitionStatus_PENDING                        RecognitionStatus = 1
	RecognitionStatus_PROCESSING                     RecognitionStatus = 2
	RecognitionStatus_COMPLETED                      RecognitionStatus = 3
	RecognitionStatus_FAILED                         RecognitionStatus = 4
)

var RecognitionStatus_name = map[int32]string{
	0: "RECOGNITION_STATUS_UNSPECIFIED",
	1: "PENDING",
	2: "PROCESSING",
	3: "COMPLETED",
	4: "FAILED",
}

var RecognitionStatus_value = map[string]int32{
	"RECOGNITION_STATUS_UNSPECIFIED": 0,
	"PENDING":                        1,
	"PROCESSING":                     2,
	"COMPLETED":                      3,
	"FAILED":                         4,
}

func (x RecognitionStatus) String() string {
	return proto.EnumName(RecognitionStatus_name, int32(x))
}

func (RecognitionStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ac8e6d38f431921d, []int{2}
}

type Assortment struct {
	Material            string                 `protobuf:"bytes,1,opt,name=material,proto3" json:"material,omitempty"`
	Name                string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Size_               *types.Any             `protobuf:"bytes,3,opt,name=size,proto3" json:"size,omitempty"`
	ChemicalComposition string                 `protobuf:"bytes,4,opt,name=chemical_composition,json=chemicalComposition,proto3" json:"chemical_composition,omitempty"`
	FormGost            string                 `protobuf:"bytes,5,opt,name=form_gost,json=formGost,proto3" json:"form_gost,omitempty"`
	ChemicalGost        string                 `protobuf:"bytes,6,opt,name=chemical_gost,json=chemicalGost,proto3" json:"chemical_gost,omitempty"`
	FigureType          string                 `protobuf:"bytes,7,opt,name=figure_type,json=figureType,proto3" json:"figure_type,omitempty"`
	SubType             string                 `protobuf:"bytes,8,opt,name=sub_type,json=subType,proto3" json:"sub_type,omitempty"`
	FieldStatus         map[string]FieldStatus `protobuf:"bytes,9,rep,name=field_status,json=fieldStatus,proto3" json:"field_status,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=proto.FieldStatus"`
}

func (m *Assortment) Reset()         { *m = Assortment{} }
func (m *Assortment) String() string { return proto.CompactTextString(m) }
func (*Assortment) ProtoMessage()    {}
func (*Assortment) Descriptor() ([]byte, []int) {
	return fileDescriptor_ac8e6d38f431921d, []int{0}
}
func (m *Assortment) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Assortment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Assortment.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Assortment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Assortment.Merge(m, src)
}
func (m *Assortment) XXX_Size() int {
	return m.Size()
}
func (m *Assortment) XXX_DiscardUnknown() {
	xxx_messageInfo_Assortment.DiscardUnknown(m)
}

var xxx_messageInfo_Assortment proto.InternalMessageInfo

func (m *Assortment) GetMaterial() string {
	if m != nil {
		return m.Material
	}
	return ""
}

func (m *Assortment) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Assortment) GetSize_() *types.Any {
	if m != nil {
		return m.Size_
	}
	return nil
}

func (m *Assortment) GetChemicalComposition() string {
	if m != nil {
		return m.ChemicalComposition
	}
	return ""
}

func (m *Assortment) GetFormGost() string {
	if m != nil {
		return m.FormGost
	}
	return ""
}

func (m *Assortment) GetChemicalGost() string {
	if m != nil {
		return m.ChemicalGost
	}
	return ""
}

func (m *Assortment) GetFigureType() string {
	if m != nil {
		return m.FigureType
	}
	return ""
}

func (m *Assortment) GetSubType() string {
	if m != nil {
		return m.SubType
	}
	return ""
}

func (m *Assortment) GetFieldStatus() map[string]FieldStatus {
	if m != nil {
		return m.FieldStatus
	}
	return nil
}

type Figure struct {
	Id             string  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ParentId       string  `protobuf:"bytes,2,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`
	Image          []byte  `protobuf:"bytes,3,opt,name=image,proto3" json:"image,omitempty"`
	ImageId        string  `protobuf:"bytes,4,opt,name=image_id,json=imageId,proto3" json:"image_id,omitempty"`
	Number         string  `protobuf:"bytes,5,opt,name=number,proto3" json:"number,omitempty"`
	Name           string  `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	SizeVertical   float32 `protobuf:"fixed32,7,opt,name=size_vertical,json=sizeVertical,proto3" json:"size_vertical,omitempty"`
	SizeHorizontal float32 `protobuf:"fixed32,8,opt,name=size_horizontal,json=sizeHorizontal,proto3" json:"size_horizontal,omitempty"`
	// Types that are valid to be assigned to MainSize:
	//
	//	*Figure_MainSizeFloat
	//	*Figure_MainSizeStr
	MainSize   isFigure_MainSize `protobuf_oneof:"main_size"`
	Assortment *Assortment       `protobuf:"bytes,11,opt,name=assortment,proto3" json:"assortment,omitempty"`
	Mass       float32           `protobuf:"fixed32,12,opt,name=mass,proto3" json:"mass,omitempty"`
}

func (m *Figure) Reset()         { *m = Figure{} }
func (m *Figure) String() string { return proto.CompactTextString(m) }
func (*Figure) ProtoMessage()    {}
func (*Figure) Descriptor() ([]byte, []int) {
	return fileDescriptor_ac8e6d38f431921d, []int{1}
}
func (m *Figure) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Figure) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Figure.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Figure) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Figure.Merge(m, src)
}
func (m *Figure) XXX_Size() int {
	return m.Size()
}
func (m *Figure) XXX_DiscardUnknown() {
	xxx_messageInfo_Figure.DiscardUnknown(m)
}

var xxx_messageInfo_Figure proto.InternalMessageInfo

type isFigure_MainSize interface {
	isFigure_MainSize()
	MarshalTo([]byte) (int, error)
	Size() int
}

type Figure_MainSizeFloat struct {
	MainSizeFloat float32 `protobuf:"fixed32,9,opt,name=main_size_float,json=mainSizeFloat,proto3,oneof" json:"main_size_float,omitempty"`
}
type Figure_MainSizeStr struct {
	MainSizeStr string `protobuf:"bytes,10,opt,name=main_size_str,json=mainSizeStr,proto3,oneof" json:"main_size_str,omitempty"`
}

func (*Figure_MainSizeFloat) isFigure_MainSize() {}
func (*Figure_MainSizeStr) isFigure_MainSize()   {}

func (m *Figure) GetMainSize() isFigure_MainSize {
	if m != nil {
		return m.MainSize
	}
	return nil
}

func (m *Figure) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Figure) GetParentId() string {
	if m != nil {
		return m.ParentId
	}
	return ""
}

func (m *Figure) GetImage() []byte {
	if m != nil {
		return m.Image
	}
	return nil
}

func (m *Figure) GetImageId() string {
	if m != nil {
		return m.ImageId
	}
	return ""
}

func (m *Figure) GetNumber() string {
	if m != nil {
		return m.Number
	}
	return ""
}

func (m *Figure) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Figure) GetSizeVertical() float32 {
	if m != nil {
		return m.SizeVertical
	}
	return 0
}

func (m *Figure) GetSizeHorizontal() float32 {
	if m != nil {
		return m.SizeHorizontal
	}
	return 0
}

func (m *Figure) GetMainSizeFloat() float32 {
	if x, ok := m.GetMainSize().(*Figure_MainSizeFloat); ok {
		return x.MainSizeFloat
	}
	return 0
}

func (m *Figure) GetMainSizeStr() string {
	if x, ok := m.GetMainSize().(*Figure_MainSizeStr); ok {
		return x.MainSizeStr
	}
	return ""
}

func (m *Figure) GetAssortment() *Assortment {
	if m != nil {
		return m.Assortment
	}
	return nil
}

func (m *Figure) GetMass() float32 {
	if m != nil {
		return m.Mass
	}
	return 0
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Figure) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Figure_MainSizeFloat)(nil),
		(*Figure_MainSizeStr)(nil),
	}
}

type SpecificationRow struct {
	Id         string      `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ParentId   string      `protobuf:"bytes,2,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`
	Position   int32       `protobuf:"varint,3,opt,name=position,proto3" json:"position,omitempty"`
	Number     string      `protobuf:"bytes,4,opt,name=number,proto3" json:"number,omitempty"`
	Name       string      `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	Material   string      `protobuf:"bytes,6,opt,name=material,proto3" json:"material,omitempty"`
	Count      int32       `protobuf:"varint,7,opt,name=count,proto3" json:"count,omitempty"`
	Size_      string      `protobuf:"bytes,8,opt,name=size,proto3" json:"size,omitempty"`
	SizeV      string      `protobuf:"bytes,9,opt,name=size_v,json=sizeV,proto3" json:"size_v,omitempty"`
	SizeH      string      `protobuf:"bytes,10,opt,name=size_h,json=sizeH,proto3" json:"size_h,omitempty"`
	Assortment *Assortment `protobuf:"bytes,11,opt,name=assortment,proto3" json:"assortment,omitempty"`
	ImageId    string      `protobuf:"bytes,12,opt,name=image_id,json=imageId,proto3" json:"image_id,omitempty"`
	SbNumber   string      `protobuf:"bytes,13,opt,name=sb_number,json=sbNumber,proto3" json:"sb_number,omitempty"`
}

func (m *SpecificationRow) Reset()         { *m = SpecificationRow{} }
func (m *SpecificationRow) String() string { return proto.CompactTextString(m) }
func (*SpecificationRow) ProtoMessage()    {}
func (*SpecificationRow) Descriptor() ([]byte, []int) {
	return fileDescriptor_ac8e6d38f431921d, []int{2}
}
func (m *SpecificationRow) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SpecificationRow) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SpecificationRow.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SpecificationRow) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SpecificationRow.Merge(m, src)
}
func (m *SpecificationRow) XXX_Size() int {
	return m.Size()
}
func (m *SpecificationRow) XXX_DiscardUnknown() {
	xxx_messageInfo_SpecificationRow.DiscardUnknown(m)
}

var xxx_messageInfo_SpecificationRow proto.InternalMessageInfo

func (m *SpecificationRow) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *SpecificationRow) GetParentId() string {
	if m != nil {
		return m.ParentId
	}
	return ""
}

func (m *SpecificationRow) GetPosition() int32 {
	if m != nil {
		return m.Position
	}
	return 0
}

func (m *SpecificationRow) GetNumber() string {
	if m != nil {
		return m.Number
	}
	return ""
}

func (m *SpecificationRow) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SpecificationRow) GetMaterial() string {
	if m != nil {
		return m.Material
	}
	return ""
}

func (m *SpecificationRow) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *SpecificationRow) GetSize_() string {
	if m != nil {
		return m.Size_
	}
	return ""
}

func (m *SpecificationRow) GetSizeV() string {
	if m != nil {
		return m.SizeV
	}
	return ""
}

func (m *SpecificationRow) GetSizeH() string {
	if m != nil {
		return m.SizeH
	}
	return ""
}

func (m *SpecificationRow) GetAssortment() *Assortment {
	if m != nil {
		return m.Assortment
	}
	return nil
}

func (m *SpecificationRow) GetImageId() string {
	if m != nil {
		return m.ImageId
	}
	return ""
}

func (m *SpecificationRow) GetSbNumber() string {
	if m != nil {
		return m.SbNumber
	}
	return ""
}

type TreeNode struct {
	Id               string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Number           string            `protobuf:"bytes,2,opt,name=number,proto3" json:"number,omitempty"`
	Name             string            `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Count            int32             `protobuf:"varint,4,opt,name=count,proto3" json:"count,omitempty"`
	Material         string            `protobuf:"bytes,5,opt,name=material,proto3" json:"material,omitempty"`
	Spec             *SpecificationRow `protobuf:"bytes,6,opt,name=spec,proto3" json:"spec,omitempty"`
	Figure           *Figure           `protobuf:"bytes,7,opt,name=figure,proto3" json:"figure,omitempty"`
	AccumulatedCount int32             `protobuf:"varint,8,opt,name=accumulated_count,json=accumulatedCount,proto3" json:"accumulated_count,omitempty"`
	Leaves           []*TreeNode       `protobuf:"bytes,9,rep,name=leaves,proto3" json:"leaves,omitempty"`
}

func (m *TreeNode) Reset()         { *m = TreeNode{} }
func (m *TreeNode) String() string { return proto.CompactTextString(m) }
func (*TreeNode) ProtoMessage()    {}
func (*TreeNode) Descriptor() ([]byte, []int) {
	return fileDescriptor_ac8e6d38f431921d, []int{3}
}
func (m *TreeNode) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TreeNode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TreeNode.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TreeNode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TreeNode.Merge(m, src)
}
func (m *TreeNode) XXX_Size() int {
	return m.Size()
}
func (m *TreeNode) XXX_DiscardUnknown() {
	xxx_messageInfo_TreeNode.DiscardUnknown(m)
}

var xxx_messageInfo_TreeNode proto.InternalMessageInfo

func (m *TreeNode) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *TreeNode) GetNumber() string {
	if m != nil {
		return m.Number
	}
	return ""
}

func (m *TreeNode) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TreeNode) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *TreeNode) GetMaterial() string {
	if m != nil {
		return m.Material
	}
	return ""
}

func (m *TreeNode) GetSpec() *SpecificationRow {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *TreeNode) GetFigure() *Figure {
	if m != nil {
		return m.Figure
	}
	return nil
}

func (m *TreeNode) GetAccumulatedCount() int32 {
	if m != nil {
		return m.AccumulatedCount
	}
	return 0
}

func (m *TreeNode) GetLeaves() []*TreeNode {
	if m != nil {
		return m.Leaves
	}
	return nil
}

func init() {
	proto.RegisterEnum("proto.FieldDescription", FieldDescription_name, FieldDescription_value)
	proto.RegisterEnum("proto.FieldStatus", FieldStatus_name, FieldStatus_value)
	proto.RegisterEnum("proto.RecognitionStatus", RecognitionStatus_name, RecognitionStatus_value)
	proto.RegisterType((*Assortment)(nil), "proto.Assortment")
	proto.RegisterMapType((map[string]FieldStatus)(nil), "proto.Assortment.FieldStatusEntry")
	proto.RegisterType((*Figure)(nil), "proto.Figure")
	proto.RegisterType((*SpecificationRow)(nil), "proto.SpecificationRow")
	proto.RegisterType((*TreeNode)(nil), "proto.TreeNode")
}

func init() { proto.RegisterFile("proto/data.proto", fileDescriptor_ac8e6d38f431921d) }

var fileDescriptor_ac8e6d38f431921d = []byte{
	// 964 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x55, 0x41, 0x6f, 0xe3, 0x44,
	0x14, 0x4e, 0x9c, 0xd8, 0x4d, 0x9e, 0x93, 0xae, 0x3b, 0x14, 0xf0, 0x76, 0x21, 0x94, 0x2c, 0x68,
	0xa3, 0x56, 0x4a, 0xb5, 0xe5, 0x82, 0xe0, 0x80, 0xb2, 0x89, 0xd3, 0x5a, 0xa4, 0x49, 0x35, 0xce,
	0x82, 0xd8, 0x8b, 0x35, 0x71, 0x26, 0xa9, 0xb5, 0xb1, 0x1d, 0xd9, 0xe3, 0xa2, 0xf4, 0xcc, 0x0f,
	0xe0, 0x37, 0xf0, 0x13, 0xf8, 0x15, 0x1c, 0xf7, 0xc8, 0x11, 0xb5, 0x12, 0xbf, 0x03, 0xcd, 0x8c,
	0xe3, 0x9a, 0x6e, 0x2f, 0x70, 0xca, 0xbc, 0xef, 0x7d, 0x79, 0xf3, 0xe6, 0xfb, 0xde, 0x8c, 0xc1,
	0x58, 0xc7, 0x11, 0x8b, 0x4e, 0xe6, 0x84, 0x91, 0xae, 0x58, 0x22, 0x55, 0xfc, 0x1c, 0x3c, 0x5d,
	0x46, 0xd1, 0x72, 0x45, 0x4f, 0x44, 0x34, 0x4b, 0x17, 0x27, 0x24, 0xdc, 0x48, 0x46, 0xfb, 0xf7,
	0x0a, 0x40, 0x2f, 0x49, 0xa2, 0x98, 0x05, 0x34, 0x64, 0xe8, 0x00, 0x6a, 0x01, 0x61, 0x34, 0xf6,
	0xc9, 0xca, 0x2c, 0x1f, 0x96, 0x3b, 0x75, 0x9c, 0xc7, 0x08, 0x41, 0x35, 0x24, 0x01, 0x35, 0x15,
	0x81, 0x8b, 0x35, 0xea, 0x40, 0x35, 0xf1, 0x6f, 0xa8, 0x59, 0x39, 0x2c, 0x77, 0xf4, 0xd3, 0xfd,
	0xae, 0xdc, 0xa8, 0xbb, 0xdd, 0xa8, 0xdb, 0x0b, 0x37, 0x58, 0x30, 0xd0, 0x4b, 0xd8, 0xf7, 0xae,
	0x68, 0xe0, 0x7b, 0x64, 0xe5, 0x7a, 0x51, 0xb0, 0x8e, 0x12, 0x9f, 0xf9, 0x51, 0x68, 0x56, 0x45,
	0xb5, 0x0f, 0xb6, 0xb9, 0xfe, 0x7d, 0x0a, 0x3d, 0x83, 0xfa, 0x22, 0x8a, 0x03, 0x77, 0x19, 0x25,
	0xcc, 0x54, 0x65, 0x37, 0x1c, 0x38, 0x8b, 0x12, 0x86, 0x9e, 0x43, 0x33, 0xaf, 0x27, 0x08, 0x9a,
	0x20, 0x34, 0xb6, 0xa0, 0x20, 0x7d, 0x06, 0xfa, 0xc2, 0x5f, 0xa6, 0x31, 0x75, 0xd9, 0x66, 0x4d,
	0xcd, 0x1d, 0x41, 0x01, 0x09, 0x4d, 0x37, 0x6b, 0x8a, 0x9e, 0x42, 0x2d, 0x49, 0x67, 0x32, 0x5b,
	0x13, 0xd9, 0x9d, 0x24, 0x9d, 0x89, 0x94, 0x05, 0x8d, 0x85, 0x4f, 0x57, 0x73, 0x37, 0x61, 0x84,
	0xa5, 0x89, 0x59, 0x3f, 0xac, 0x74, 0xf4, 0xd3, 0xb6, 0x3c, 0x5b, 0xf7, 0x5e, 0xb3, 0xee, 0x90,
	0xb3, 0x1c, 0x41, 0xb2, 0x42, 0x16, 0x6f, 0xb0, 0xbe, 0xb8, 0x47, 0x0e, 0x30, 0x18, 0x0f, 0x09,
	0xc8, 0x80, 0xca, 0x5b, 0xba, 0xc9, 0x04, 0xe6, 0x4b, 0xd4, 0x01, 0xf5, 0x9a, 0xac, 0x52, 0x29,
	0xee, 0xee, 0x29, 0xca, 0x76, 0x29, 0xfc, 0x13, 0x4b, 0xc2, 0x37, 0xca, 0xd7, 0xe5, 0xf6, 0x2f,
	0x15, 0xd0, 0x86, 0xe2, 0x10, 0x68, 0x17, 0x14, 0x7f, 0x9e, 0x55, 0x52, 0xfc, 0x39, 0xd7, 0x6c,
	0x4d, 0x62, 0x1a, 0x32, 0xd7, 0x9f, 0x67, 0x4e, 0xd5, 0x24, 0x60, 0xcf, 0xd1, 0x3e, 0xa8, 0x7e,
	0x40, 0x96, 0xd2, 0xae, 0x06, 0x96, 0x01, 0xd7, 0x40, 0x2c, 0xf8, 0x3f, 0xa4, 0x1b, 0x3b, 0x22,
	0xb6, 0xe7, 0xe8, 0x23, 0xd0, 0xc2, 0x34, 0x98, 0xd1, 0x38, 0x93, 0x3f, 0x8b, 0xf2, 0x51, 0xd0,
	0x0a, 0xa3, 0xf0, 0x1c, 0x9a, 0xdc, 0x68, 0xf7, 0x9a, 0xc6, 0x8c, 0x1b, 0x20, 0xd4, 0x56, 0x70,
	0x83, 0x83, 0x3f, 0x64, 0x18, 0x7a, 0x01, 0x4f, 0x04, 0xe9, 0x2a, 0x8a, 0xfd, 0x9b, 0x28, 0x64,
	0x64, 0x25, 0x64, 0x57, 0xf0, 0x2e, 0x87, 0xcf, 0x73, 0x14, 0x75, 0xe0, 0x49, 0x40, 0xfc, 0xd0,
	0x15, 0xec, 0xc5, 0x2a, 0x22, 0xcc, 0xac, 0x73, 0xe2, 0x79, 0x09, 0x37, 0x79, 0xc2, 0xf1, 0x6f,
	0xe8, 0x90, 0xc3, 0xe8, 0x0b, 0x68, 0xde, 0x33, 0x13, 0x16, 0x9b, 0xc0, 0x9b, 0x3a, 0x2f, 0x61,
	0x7d, 0xcb, 0x73, 0x58, 0x8c, 0x5e, 0x02, 0x90, 0xdc, 0x32, 0x53, 0x17, 0xe3, 0xba, 0xf7, 0x9e,
	0x97, 0xb8, 0x40, 0xe2, 0x87, 0x0c, 0x48, 0x92, 0x98, 0x0d, 0xd1, 0xa0, 0x58, 0xbf, 0xd2, 0xa1,
	0x9e, 0x6f, 0xd6, 0xfe, 0x5b, 0x01, 0xc3, 0x59, 0x53, 0xcf, 0x5f, 0xf8, 0x1e, 0xe1, 0x13, 0x8b,
	0xa3, 0x9f, 0xff, 0x9b, 0x21, 0x07, 0x50, 0xcb, 0x2f, 0x02, 0xf7, 0x44, 0xc5, 0x79, 0x5c, 0xd0,
	0xbe, 0xfa, 0xa8, 0xf6, 0x6a, 0x41, 0xfb, 0xe2, 0xb5, 0xd5, 0x1e, 0x5c, 0xdb, 0x7d, 0x50, 0xbd,
	0x28, 0x0d, 0x99, 0xf0, 0x43, 0xc5, 0x32, 0xe0, 0x55, 0xc4, 0xc5, 0x95, 0x43, 0x2f, 0xaf, 0xe8,
	0x87, 0xa0, 0x49, 0x07, 0x85, 0xd4, 0x75, 0xac, 0x0a, 0xeb, 0x72, 0xf8, 0x4a, 0x2a, 0x2b, 0xe1,
	0xf3, 0xff, 0xa3, 0x68, 0x71, 0xd2, 0x1a, 0xff, 0x9e, 0xb4, 0x67, 0x50, 0x4f, 0x66, 0x6e, 0x76,
	0xe0, 0xa6, 0x3c, 0x42, 0x32, 0x1b, 0x8b, 0xb8, 0xfd, 0x9b, 0x02, 0xb5, 0x69, 0x4c, 0xe9, 0x38,
	0x9a, 0xbf, 0x3f, 0xf1, 0xf7, 0x3a, 0x29, 0x8f, 0xea, 0x54, 0x29, 0xe8, 0x94, 0x6b, 0x51, 0x2d,
	0x6a, 0x51, 0x54, 0x4f, 0x7d, 0xa0, 0xde, 0x31, 0x54, 0x93, 0x35, 0xf5, 0x84, 0xaa, 0xfa, 0xe9,
	0xc7, 0xd9, 0xf9, 0x1e, 0xba, 0x8e, 0x05, 0x09, 0x7d, 0x09, 0x9a, 0x7c, 0x5b, 0x84, 0xd6, 0xfa,
	0x69, 0x33, 0xbf, 0xc6, 0x1c, 0xc4, 0x59, 0x12, 0x1d, 0xc3, 0x1e, 0xf1, 0xbc, 0x34, 0x48, 0x57,
	0x84, 0xd1, 0xb9, 0x2b, 0x3b, 0xaa, 0x89, 0x8e, 0x8c, 0x42, 0xa2, 0x2f, 0x9a, 0x7b, 0x01, 0xda,
	0x8a, 0x92, 0x6b, 0xba, 0x7d, 0x80, 0x9e, 0x64, 0x35, 0xb7, 0x7a, 0xe0, 0x2c, 0x7d, 0x74, 0x95,
	0x3d, 0x34, 0x03, 0x9a, 0x78, 0xb1, 0xbf, 0x16, 0x33, 0xf4, 0x39, 0x7c, 0x3a, 0xb4, 0xad, 0xd1,
	0xc0, 0x1d, 0x58, 0x4e, 0x1f, 0xdb, 0x97, 0x53, 0x7b, 0x32, 0x76, 0x5f, 0x8f, 0x9d, 0x4b, 0xab,
	0x6f, 0x0f, 0x6d, 0x6b, 0x60, 0x94, 0x50, 0x0d, 0xaa, 0x8e, 0xfd, 0xc6, 0x32, 0xca, 0x68, 0x17,
	0xa0, 0xe7, 0x38, 0x13, 0x3c, 0xbd, 0xb0, 0xc6, 0x53, 0x43, 0xe1, 0xf1, 0xc5, 0x64, 0x60, 0x8d,
	0x5c, 0x91, 0xaf, 0xa0, 0x1d, 0xa8, 0xf4, 0x46, 0x23, 0xa3, 0x7a, 0xf4, 0x1d, 0xe8, 0x85, 0x87,
	0x09, 0x7d, 0x02, 0xa6, 0xdc, 0xc4, 0x99, 0xf6, 0xa6, 0xaf, 0x9d, 0x07, 0xf5, 0x35, 0x50, 0x26,
	0xdf, 0x1b, 0x65, 0x04, 0xa0, 0xfd, 0x64, 0x8d, 0x46, 0x93, 0x1f, 0x0d, 0xe5, 0x28, 0x82, 0x3d,
	0x4c, 0xbd, 0x68, 0x19, 0x8a, 0x49, 0xcf, 0xca, 0xb4, 0xa1, 0x85, 0xad, 0xfe, 0xe4, 0x6c, 0x6c,
	0x8b, 0x2e, 0x1f, 0x2d, 0xa6, 0xc3, 0xce, 0xa5, 0x35, 0x1e, 0xd8, 0xe3, 0x33, 0xd9, 0xef, 0x25,
	0x9e, 0xf4, 0x2d, 0xc7, 0xe1, 0xb1, 0x82, 0x9a, 0x50, 0xef, 0x4f, 0x2e, 0x2e, 0x47, 0xd6, 0xd4,
	0x1a, 0x18, 0x15, 0xbe, 0xe1, 0xb0, 0x67, 0x8f, 0xac, 0x81, 0x51, 0x7d, 0x75, 0xfc, 0xc7, 0x6d,
	0xab, 0xfc, 0xee, 0xb6, 0x55, 0xfe, 0xeb, 0xb6, 0x55, 0xfe, 0xf5, 0xae, 0x55, 0x7a, 0x77, 0xd7,
	0x2a, 0xfd, 0x79, 0xd7, 0x2a, 0xbd, 0xd9, 0xeb, 0x9e, 0xac, 0xdf, 0x2e, 0xe5, 0x97, 0xf1, 0x5b,
	0xf9, 0xd9, 0xd2, 0xc4, 0xcf, 0x57, 0xff, 0x04, 0x00, 0x00, 0xff, 0xff, 0x62, 0x10, 0x2b, 0x83,
	0x4f, 0x07, 0x00, 0x00,
}

func (m *Assortment) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Assortment) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Assortment) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FieldStatus) > 0 {
		for k := range m.FieldStatus {
			v := m.FieldStatus[k]
			baseI := i
			i = encodeVarintData(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintData(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintData(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x4a
		}
	}
	if len(m.SubType) > 0 {
		i -= len(m.SubType)
		copy(dAtA[i:], m.SubType)
		i = encodeVarintData(dAtA, i, uint64(len(m.SubType)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.FigureType) > 0 {
		i -= len(m.FigureType)
		copy(dAtA[i:], m.FigureType)
		i = encodeVarintData(dAtA, i, uint64(len(m.FigureType)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.ChemicalGost) > 0 {
		i -= len(m.ChemicalGost)
		copy(dAtA[i:], m.ChemicalGost)
		i = encodeVarintData(dAtA, i, uint64(len(m.ChemicalGost)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.FormGost) > 0 {
		i -= len(m.FormGost)
		copy(dAtA[i:], m.FormGost)
		i = encodeVarintData(dAtA, i, uint64(len(m.FormGost)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ChemicalComposition) > 0 {
		i -= len(m.ChemicalComposition)
		copy(dAtA[i:], m.ChemicalComposition)
		i = encodeVarintData(dAtA, i, uint64(len(m.ChemicalComposition)))
		i--
		dAtA[i] = 0x22
	}
	if m.Size_ != nil {
		{
			size, err := m.Size_.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintData(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintData(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Material) > 0 {
		i -= len(m.Material)
		copy(dAtA[i:], m.Material)
		i = encodeVarintData(dAtA, i, uint64(len(m.Material)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Figure) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Figure) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Figure) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Mass != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Mass))))
		i--
		dAtA[i] = 0x65
	}
	if m.Assortment != nil {
		{
			size, err := m.Assortment.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintData(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if m.MainSize != nil {
		{
			size := m.MainSize.Size()
			i -= size
			if _, err := m.MainSize.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.SizeHorizontal != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.SizeHorizontal))))
		i--
		dAtA[i] = 0x45
	}
	if m.SizeVertical != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.SizeVertical))))
		i--
		dAtA[i] = 0x3d
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintData(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Number) > 0 {
		i -= len(m.Number)
		copy(dAtA[i:], m.Number)
		i = encodeVarintData(dAtA, i, uint64(len(m.Number)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ImageId) > 0 {
		i -= len(m.ImageId)
		copy(dAtA[i:], m.ImageId)
		i = encodeVarintData(dAtA, i, uint64(len(m.ImageId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Image) > 0 {
		i -= len(m.Image)
		copy(dAtA[i:], m.Image)
		i = encodeVarintData(dAtA, i, uint64(len(m.Image)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ParentId) > 0 {
		i -= len(m.ParentId)
		copy(dAtA[i:], m.ParentId)
		i = encodeVarintData(dAtA, i, uint64(len(m.ParentId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintData(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Figure_MainSizeFloat) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Figure_MainSizeFloat) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= 4
	encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.MainSizeFloat))))
	i--
	dAtA[i] = 0x4d
	return len(dAtA) - i, nil
}
func (m *Figure_MainSizeStr) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Figure_MainSizeStr) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.MainSizeStr)
	copy(dAtA[i:], m.MainSizeStr)
	i = encodeVarintData(dAtA, i, uint64(len(m.MainSizeStr)))
	i--
	dAtA[i] = 0x52
	return len(dAtA) - i, nil
}
func (m *SpecificationRow) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SpecificationRow) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SpecificationRow) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SbNumber) > 0 {
		i -= len(m.SbNumber)
		copy(dAtA[i:], m.SbNumber)
		i = encodeVarintData(dAtA, i, uint64(len(m.SbNumber)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.ImageId) > 0 {
		i -= len(m.ImageId)
		copy(dAtA[i:], m.ImageId)
		i = encodeVarintData(dAtA, i, uint64(len(m.ImageId)))
		i--
		dAtA[i] = 0x62
	}
	if m.Assortment != nil {
		{
			size, err := m.Assortment.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintData(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if len(m.SizeH) > 0 {
		i -= len(m.SizeH)
		copy(dAtA[i:], m.SizeH)
		i = encodeVarintData(dAtA, i, uint64(len(m.SizeH)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.SizeV) > 0 {
		i -= len(m.SizeV)
		copy(dAtA[i:], m.SizeV)
		i = encodeVarintData(dAtA, i, uint64(len(m.SizeV)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Size_) > 0 {
		i -= len(m.Size_)
		copy(dAtA[i:], m.Size_)
		i = encodeVarintData(dAtA, i, uint64(len(m.Size_)))
		i--
		dAtA[i] = 0x42
	}
	if m.Count != 0 {
		i = encodeVarintData(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x38
	}
	if len(m.Material) > 0 {
		i -= len(m.Material)
		copy(dAtA[i:], m.Material)
		i = encodeVarintData(dAtA, i, uint64(len(m.Material)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintData(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Number) > 0 {
		i -= len(m.Number)
		copy(dAtA[i:], m.Number)
		i = encodeVarintData(dAtA, i, uint64(len(m.Number)))
		i--
		dAtA[i] = 0x22
	}
	if m.Position != 0 {
		i = encodeVarintData(dAtA, i, uint64(m.Position))
		i--
		dAtA[i] = 0x18
	}
	if len(m.ParentId) > 0 {
		i -= len(m.ParentId)
		copy(dAtA[i:], m.ParentId)
		i = encodeVarintData(dAtA, i, uint64(len(m.ParentId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintData(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TreeNode) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TreeNode) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TreeNode) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Leaves) > 0 {
		for iNdEx := len(m.Leaves) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Leaves[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintData(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4a
		}
	}
	if m.AccumulatedCount != 0 {
		i = encodeVarintData(dAtA, i, uint64(m.AccumulatedCount))
		i--
		dAtA[i] = 0x40
	}
	if m.Figure != nil {
		{
			size, err := m.Figure.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintData(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.Spec != nil {
		{
			size, err := m.Spec.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintData(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.Material) > 0 {
		i -= len(m.Material)
		copy(dAtA[i:], m.Material)
		i = encodeVarintData(dAtA, i, uint64(len(m.Material)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Count != 0 {
		i = encodeVarintData(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintData(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Number) > 0 {
		i -= len(m.Number)
		copy(dAtA[i:], m.Number)
		i = encodeVarintData(dAtA, i, uint64(len(m.Number)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintData(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintData(dAtA []byte, offset int, v uint64) int {
	offset -= sovData(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Assortment) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Material)
	if l > 0 {
		n += 1 + l + sovData(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovData(uint64(l))
	}
	if m.Size_ != nil {
		l = m.Size_.Size()
		n += 1 + l + sovData(uint64(l))
	}
	l = len(m.ChemicalComposition)
	if l > 0 {
		n += 1 + l + sovData(uint64(l))
	}
	l = len(m.FormGost)
	if l > 0 {
		n += 1 + l + sovData(uint64(l))
	}
	l = len(m.ChemicalGost)
	if l > 0 {
		n += 1 + l + sovData(uint64(l))
	}
	l = len(m.FigureType)
	if l > 0 {
		n += 1 + l + sovData(uint64(l))
	}
	l = len(m.SubType)
	if l > 0 {
		n += 1 + l + sovData(uint64(l))
	}
	if len(m.FieldStatus) > 0 {
		for k, v := range m.FieldStatus {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovData(uint64(len(k))) + 1 + sovData(uint64(v))
			n += mapEntrySize + 1 + sovData(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *Figure) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovData(uint64(l))
	}
	l = len(m.ParentId)
	if l > 0 {
		n += 1 + l + sovData(uint64(l))
	}
	l = len(m.Image)
	if l > 0 {
		n += 1 + l + sovData(uint64(l))
	}
	l = len(m.ImageId)
	if l > 0 {
		n += 1 + l + sovData(uint64(l))
	}
	l = len(m.Number)
	if l > 0 {
		n += 1 + l + sovData(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovData(uint64(l))
	}
	if m.SizeVertical != 0 {
		n += 5
	}
	if m.SizeHorizontal != 0 {
		n += 5
	}
	if m.MainSize != nil {
		n += m.MainSize.Size()
	}
	if m.Assortment != nil {
		l = m.Assortment.Size()
		n += 1 + l + sovData(uint64(l))
	}
	if m.Mass != 0 {
		n += 5
	}
	return n
}

func (m *Figure_MainSizeFloat) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 5
	return n
}
func (m *Figure_MainSizeStr) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MainSizeStr)
	n += 1 + l + sovData(uint64(l))
	return n
}
func (m *SpecificationRow) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovData(uint64(l))
	}
	l = len(m.ParentId)
	if l > 0 {
		n += 1 + l + sovData(uint64(l))
	}
	if m.Position != 0 {
		n += 1 + sovData(uint64(m.Position))
	}
	l = len(m.Number)
	if l > 0 {
		n += 1 + l + sovData(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovData(uint64(l))
	}
	l = len(m.Material)
	if l > 0 {
		n += 1 + l + sovData(uint64(l))
	}
	if m.Count != 0 {
		n += 1 + sovData(uint64(m.Count))
	}
	l = len(m.Size_)
	if l > 0 {
		n += 1 + l + sovData(uint64(l))
	}
	l = len(m.SizeV)
	if l > 0 {
		n += 1 + l + sovData(uint64(l))
	}
	l = len(m.SizeH)
	if l > 0 {
		n += 1 + l + sovData(uint64(l))
	}
	if m.Assortment != nil {
		l = m.Assortment.Size()
		n += 1 + l + sovData(uint64(l))
	}
	l = len(m.ImageId)
	if l > 0 {
		n += 1 + l + sovData(uint64(l))
	}
	l = len(m.SbNumber)
	if l > 0 {
		n += 1 + l + sovData(uint64(l))
	}
	return n
}

func (m *TreeNode) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovData(uint64(l))
	}
	l = len(m.Number)
	if l > 0 {
		n += 1 + l + sovData(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovData(uint64(l))
	}
	if m.Count != 0 {
		n += 1 + sovData(uint64(m.Count))
	}
	l = len(m.Material)
	if l > 0 {
		n += 1 + l + sovData(uint64(l))
	}
	if m.Spec != nil {
		l = m.Spec.Size()
		n += 1 + l + sovData(uint64(l))
	}
	if m.Figure != nil {
		l = m.Figure.Size()
		n += 1 + l + sovData(uint64(l))
	}
	if m.AccumulatedCount != 0 {
		n += 1 + sovData(uint64(m.AccumulatedCount))
	}
	if len(m.Leaves) > 0 {
		for _, e := range m.Leaves {
			l = e.Size()
			n += 1 + l + sovData(uint64(l))
		}
	}
	return n
}

func sovData(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozData(x uint64) (n int) {
	return sovData(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Assortment) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Assortment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Assortment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Material", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Material = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Size_", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Size_ == nil {
				m.Size_ = &types.Any{}
			}
			if err := m.Size_.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChemicalComposition", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChemicalComposition = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FormGost", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FormGost = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChemicalGost", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChemicalGost = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FigureType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FigureType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FieldStatus == nil {
				m.FieldStatus = make(map[string]FieldStatus)
			}
			var mapkey string
			var mapvalue FieldStatus
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowData
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowData
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthData
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthData
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowData
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= FieldStatus(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipData(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthData
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.FieldStatus[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Figure) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Figure: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Figure: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParentId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Image", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Image = append(m.Image[:0], dAtA[iNdEx:postIndex]...)
			if m.Image == nil {
				m.Image = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImageId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ImageId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Number", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Number = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field SizeVertical", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.SizeVertical = float32(math.Float32frombits(v))
		case 8:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field SizeHorizontal", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.SizeHorizontal = float32(math.Float32frombits(v))
		case 9:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field MainSizeFloat", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.MainSize = &Figure_MainSizeFloat{float32(math.Float32frombits(v))}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MainSizeStr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MainSize = &Figure_MainSizeStr{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Assortment", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Assortment == nil {
				m.Assortment = &Assortment{}
			}
			if err := m.Assortment.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mass", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Mass = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SpecificationRow) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SpecificationRow: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SpecificationRow: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParentId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Position", wireType)
			}
			m.Position = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Position |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Number", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Number = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Material", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Material = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Size_", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Size_ = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SizeV", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SizeV = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SizeH", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SizeH = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Assortment", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Assortment == nil {
				m.Assortment = &Assortment{}
			}
			if err := m.Assortment.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImageId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ImageId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SbNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SbNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TreeNode) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TreeNode: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TreeNode: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Number", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Number = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Material", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Material = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Spec == nil {
				m.Spec = &SpecificationRow{}
			}
			if err := m.Spec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Figure", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Figure == nil {
				m.Figure = &Figure{}
			}
			if err := m.Figure.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccumulatedCount", wireType)
			}
			m.AccumulatedCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AccumulatedCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Leaves", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Leaves = append(m.Leaves, &TreeNode{})
			if err := m.Leaves[len(m.Leaves)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipData(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowData
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowData
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowData
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthData
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupData
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthData
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthData        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowData          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupData = fmt.Errorf("proto: unexpected end of group")
)
