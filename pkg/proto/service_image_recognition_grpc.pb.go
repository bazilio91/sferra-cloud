// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: proto/service_image_recognition.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ImageRecognitionService_GetNextPendingTask_FullMethodName = "/proto.ImageRecognitionService/GetNextPendingTask"
	ImageRecognitionService_ClaimTask_FullMethodName          = "/proto.ImageRecognitionService/ClaimTask"
	ImageRecognitionService_ReportProgress_FullMethodName     = "/proto.ImageRecognitionService/ReportProgress"
	ImageRecognitionService_CompleteTask_FullMethodName       = "/proto.ImageRecognitionService/CompleteTask"
)

// ImageRecognitionServiceClient is the client API for ImageRecognitionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ImageRecognitionServiceClient interface {
	GetNextPendingTask(ctx context.Context, in *WorkerInfo, opts ...grpc.CallOption) (grpc.ServerStreamingClient[PendingTaskResponse], error)
	ClaimTask(ctx context.Context, in *ClaimTaskRequest, opts ...grpc.CallOption) (*ClaimTaskResponse, error)
	ReportProgress(ctx context.Context, in *ReportProgressRequest, opts ...grpc.CallOption) (*ReportProgressResponse, error)
	CompleteTask(ctx context.Context, in *CompleteRecognitionTaskRequest, opts ...grpc.CallOption) (*CompleteRecognitionTaskResponse, error)
}

type imageRecognitionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewImageRecognitionServiceClient(cc grpc.ClientConnInterface) ImageRecognitionServiceClient {
	return &imageRecognitionServiceClient{cc}
}

func (c *imageRecognitionServiceClient) GetNextPendingTask(ctx context.Context, in *WorkerInfo, opts ...grpc.CallOption) (grpc.ServerStreamingClient[PendingTaskResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ImageRecognitionService_ServiceDesc.Streams[0], ImageRecognitionService_GetNextPendingTask_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[WorkerInfo, PendingTaskResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ImageRecognitionService_GetNextPendingTaskClient = grpc.ServerStreamingClient[PendingTaskResponse]

func (c *imageRecognitionServiceClient) ClaimTask(ctx context.Context, in *ClaimTaskRequest, opts ...grpc.CallOption) (*ClaimTaskResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClaimTaskResponse)
	err := c.cc.Invoke(ctx, ImageRecognitionService_ClaimTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imageRecognitionServiceClient) ReportProgress(ctx context.Context, in *ReportProgressRequest, opts ...grpc.CallOption) (*ReportProgressResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReportProgressResponse)
	err := c.cc.Invoke(ctx, ImageRecognitionService_ReportProgress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imageRecognitionServiceClient) CompleteTask(ctx context.Context, in *CompleteRecognitionTaskRequest, opts ...grpc.CallOption) (*CompleteRecognitionTaskResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CompleteRecognitionTaskResponse)
	err := c.cc.Invoke(ctx, ImageRecognitionService_CompleteTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ImageRecognitionServiceServer is the server API for ImageRecognitionService service.
// All implementations must embed UnimplementedImageRecognitionServiceServer
// for forward compatibility.
type ImageRecognitionServiceServer interface {
	GetNextPendingTask(*WorkerInfo, grpc.ServerStreamingServer[PendingTaskResponse]) error
	ClaimTask(context.Context, *ClaimTaskRequest) (*ClaimTaskResponse, error)
	ReportProgress(context.Context, *ReportProgressRequest) (*ReportProgressResponse, error)
	CompleteTask(context.Context, *CompleteRecognitionTaskRequest) (*CompleteRecognitionTaskResponse, error)
	mustEmbedUnimplementedImageRecognitionServiceServer()
}

// UnimplementedImageRecognitionServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedImageRecognitionServiceServer struct{}

func (UnimplementedImageRecognitionServiceServer) GetNextPendingTask(*WorkerInfo, grpc.ServerStreamingServer[PendingTaskResponse]) error {
	return status.Errorf(codes.Unimplemented, "method GetNextPendingTask not implemented")
}
func (UnimplementedImageRecognitionServiceServer) ClaimTask(context.Context, *ClaimTaskRequest) (*ClaimTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClaimTask not implemented")
}
func (UnimplementedImageRecognitionServiceServer) ReportProgress(context.Context, *ReportProgressRequest) (*ReportProgressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportProgress not implemented")
}
func (UnimplementedImageRecognitionServiceServer) CompleteTask(context.Context, *CompleteRecognitionTaskRequest) (*CompleteRecognitionTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompleteTask not implemented")
}
func (UnimplementedImageRecognitionServiceServer) mustEmbedUnimplementedImageRecognitionServiceServer() {
}
func (UnimplementedImageRecognitionServiceServer) testEmbeddedByValue() {}

// UnsafeImageRecognitionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ImageRecognitionServiceServer will
// result in compilation errors.
type UnsafeImageRecognitionServiceServer interface {
	mustEmbedUnimplementedImageRecognitionServiceServer()
}

func RegisterImageRecognitionServiceServer(s grpc.ServiceRegistrar, srv ImageRecognitionServiceServer) {
	// If the following call pancis, it indicates UnimplementedImageRecognitionServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ImageRecognitionService_ServiceDesc, srv)
}

func _ImageRecognitionService_GetNextPendingTask_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WorkerInfo)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ImageRecognitionServiceServer).GetNextPendingTask(m, &grpc.GenericServerStream[WorkerInfo, PendingTaskResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ImageRecognitionService_GetNextPendingTaskServer = grpc.ServerStreamingServer[PendingTaskResponse]

func _ImageRecognitionService_ClaimTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClaimTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageRecognitionServiceServer).ClaimTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImageRecognitionService_ClaimTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageRecognitionServiceServer).ClaimTask(ctx, req.(*ClaimTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImageRecognitionService_ReportProgress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportProgressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageRecognitionServiceServer).ReportProgress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImageRecognitionService_ReportProgress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageRecognitionServiceServer).ReportProgress(ctx, req.(*ReportProgressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImageRecognitionService_CompleteTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompleteRecognitionTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageRecognitionServiceServer).CompleteTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImageRecognitionService_CompleteTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageRecognitionServiceServer).CompleteTask(ctx, req.(*CompleteRecognitionTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ImageRecognitionService_ServiceDesc is the grpc.ServiceDesc for ImageRecognitionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ImageRecognitionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.ImageRecognitionService",
	HandlerType: (*ImageRecognitionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ClaimTask",
			Handler:    _ImageRecognitionService_ClaimTask_Handler,
		},
		{
			MethodName: "ReportProgress",
			Handler:    _ImageRecognitionService_ReportProgress_Handler,
		},
		{
			MethodName: "CompleteTask",
			Handler:    _ImageRecognitionService_CompleteTask_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetNextPendingTask",
			Handler:       _ImageRecognitionService_GetNextPendingTask_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/service_image_recognition.proto",
}
