// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: proto/service_image_processing.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ImageProcessingService_GetNextPendingTask_FullMethodName = "/proto.ImageProcessingService/GetNextPendingTask"
	ImageProcessingService_ClaimTask_FullMethodName          = "/proto.ImageProcessingService/ClaimTask"
	ImageProcessingService_CompleteTask_FullMethodName       = "/proto.ImageProcessingService/CompleteTask"
)

// ImageProcessingServiceClient is the client API for ImageProcessingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ImageProcessingServiceClient interface {
	GetNextPendingTask(ctx context.Context, in *WorkerInfo, opts ...grpc.CallOption) (grpc.ServerStreamingClient[PendingTaskResponse], error)
	ClaimTask(ctx context.Context, in *ClaimTaskRequest, opts ...grpc.CallOption) (*ClaimTaskResponse, error)
	CompleteTask(ctx context.Context, in *CompleteImageProcessingTaskRequest, opts ...grpc.CallOption) (*CompleteImageProcessingTaskResponse, error)
}

type imageProcessingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewImageProcessingServiceClient(cc grpc.ClientConnInterface) ImageProcessingServiceClient {
	return &imageProcessingServiceClient{cc}
}

func (c *imageProcessingServiceClient) GetNextPendingTask(ctx context.Context, in *WorkerInfo, opts ...grpc.CallOption) (grpc.ServerStreamingClient[PendingTaskResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ImageProcessingService_ServiceDesc.Streams[0], ImageProcessingService_GetNextPendingTask_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[WorkerInfo, PendingTaskResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ImageProcessingService_GetNextPendingTaskClient = grpc.ServerStreamingClient[PendingTaskResponse]

func (c *imageProcessingServiceClient) ClaimTask(ctx context.Context, in *ClaimTaskRequest, opts ...grpc.CallOption) (*ClaimTaskResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClaimTaskResponse)
	err := c.cc.Invoke(ctx, ImageProcessingService_ClaimTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imageProcessingServiceClient) CompleteTask(ctx context.Context, in *CompleteImageProcessingTaskRequest, opts ...grpc.CallOption) (*CompleteImageProcessingTaskResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CompleteImageProcessingTaskResponse)
	err := c.cc.Invoke(ctx, ImageProcessingService_CompleteTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ImageProcessingServiceServer is the server API for ImageProcessingService service.
// All implementations must embed UnimplementedImageProcessingServiceServer
// for forward compatibility.
type ImageProcessingServiceServer interface {
	GetNextPendingTask(*WorkerInfo, grpc.ServerStreamingServer[PendingTaskResponse]) error
	ClaimTask(context.Context, *ClaimTaskRequest) (*ClaimTaskResponse, error)
	CompleteTask(context.Context, *CompleteImageProcessingTaskRequest) (*CompleteImageProcessingTaskResponse, error)
	mustEmbedUnimplementedImageProcessingServiceServer()
}

// UnimplementedImageProcessingServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedImageProcessingServiceServer struct{}

func (UnimplementedImageProcessingServiceServer) GetNextPendingTask(*WorkerInfo, grpc.ServerStreamingServer[PendingTaskResponse]) error {
	return status.Errorf(codes.Unimplemented, "method GetNextPendingTask not implemented")
}
func (UnimplementedImageProcessingServiceServer) ClaimTask(context.Context, *ClaimTaskRequest) (*ClaimTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClaimTask not implemented")
}
func (UnimplementedImageProcessingServiceServer) CompleteTask(context.Context, *CompleteImageProcessingTaskRequest) (*CompleteImageProcessingTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompleteTask not implemented")
}
func (UnimplementedImageProcessingServiceServer) mustEmbedUnimplementedImageProcessingServiceServer() {
}
func (UnimplementedImageProcessingServiceServer) testEmbeddedByValue() {}

// UnsafeImageProcessingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ImageProcessingServiceServer will
// result in compilation errors.
type UnsafeImageProcessingServiceServer interface {
	mustEmbedUnimplementedImageProcessingServiceServer()
}

func RegisterImageProcessingServiceServer(s grpc.ServiceRegistrar, srv ImageProcessingServiceServer) {
	// If the following call pancis, it indicates UnimplementedImageProcessingServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ImageProcessingService_ServiceDesc, srv)
}

func _ImageProcessingService_GetNextPendingTask_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WorkerInfo)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ImageProcessingServiceServer).GetNextPendingTask(m, &grpc.GenericServerStream[WorkerInfo, PendingTaskResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ImageProcessingService_GetNextPendingTaskServer = grpc.ServerStreamingServer[PendingTaskResponse]

func _ImageProcessingService_ClaimTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClaimTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageProcessingServiceServer).ClaimTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImageProcessingService_ClaimTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageProcessingServiceServer).ClaimTask(ctx, req.(*ClaimTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImageProcessingService_CompleteTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompleteImageProcessingTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageProcessingServiceServer).CompleteTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImageProcessingService_CompleteTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageProcessingServiceServer).CompleteTask(ctx, req.(*CompleteImageProcessingTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ImageProcessingService_ServiceDesc is the grpc.ServiceDesc for ImageProcessingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ImageProcessingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.ImageProcessingService",
	HandlerType: (*ImageProcessingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ClaimTask",
			Handler:    _ImageProcessingService_ClaimTask_Handler,
		},
		{
			MethodName: "CompleteTask",
			Handler:    _ImageProcessingService_CompleteTask_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetNextPendingTask",
			Handler:       _ImageProcessingService_GetNextPendingTask_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/service_image_processing.proto",
}
